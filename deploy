#!/bin/bash

#
# functions

# sync to localhost
function sync_local {

    # check if we skip delete
    del="--delete"
    if [[ "${del_on_sync}" = false || "${del_on_sync}" = no ]] ;
    then
        del=""
    fi

    # some files we always exclude
    static_exclude="--exclude=.git --exclude=.gitignore --exclude=README.md --exclude=LICENSE.md --exclude=.deploy --exclude=.idea"

    # check if we need to add apache config file to list of excluded files

    if [[ ! -z "$apache_conf" ]] ;
    then
        static_exclude+=" --exclude=${apache_conf}"
    fi

    # check if we need to add .gitignore file
    if [[ -f .gitignore ]] ;
    then
        exclude="--exclude-from=.gitignore "
    else
        exclude=""
    fi

    # Deploy
    echo "Deploying locally.."
    rsync -avz ${del} ${exclude} ${relative} ${static_exclude} ${source_path} ${path}

    # Deploy apache config (optional)
    if [[ ! -z "$apache_conf" ]] ;
    then
        echo "Deploying apache config.."
        sudo cp ${apache_conf} /etc/apache2/sites-available
        sudo a2ensite ${apache_conf} > /dev/null
        sudo systemctl reload apache2
    fi


    # Cleanup
    cleanup
}

# sync to remote host
function sync_remote {

    # check if we skip delete
    del="--delete"
    if [[ "${del_on_sync}" = false || "${del_on_sync}" = no ]] ;
    then
        del=""
    fi

    # some files we always exclude
    static_exclude="--exclude=.git --exclude=.gitignore --exclude=README.md --exclude=LICENSE.md --exclude=.deploy --exclude=.idea"

    exclude=""
    # check if we need to add .gitignore file
    if [[ -f .gitignore ]]
    then
        exclude="--exclude-from=.gitignore "
    fi

    # Deploy
    echo "Deploying to remote host using rsync .."
    rsync -avzc ${del} ${exclude} ${relative} ${static_exclude} ${source_path} ${user}@${host}:${path}

    # Cleanup
    cleanup
}

# sync to s3
function sync_s3 {

    # check if we skip delete
    del="--delete"
    if [[ "${del_on_sync}" = false || "${del_on_sync}" = no ]] ;
    then
        del=""
    fi

    # some files we always exclude
    static_exclude="--exclude=.git/* --exclude=.gitignore --exclude=README.md --exclude=LICENSE.md --exclude=.deploy --exclude=.idea/*"

    dynamic_exclude=""
    # read gitignore file and prepare parameters
    if [[ -f .gitignore ]]
    then
        while IFS='' read -r line || [[ -n "$line" ]]; do
        dynamic_exclude="${dynamic_exclude} --exclude=${line}"
        done < .gitignore
    fi

    # Deploy
    echo "Deploying to s3 bucket using aws s3 sync .."
    aws s3 sync ${source_path} ${path} ${del} ${dynamic_exclude} ${static_exclude}

    # Check if we need to invalidate a CloudFront distribution
    if [[ -n "${cdn+set}" ]]
    then
        echo "Invalidating CloudFront distribution"
        aws cloudfront create-invalidation --distribution-id ${cdn} --paths '/*' > /dev/null
    fi

    # Cleanup
    cleanup
}

# cleanup
function cleanup {
    if [[ -n "${dir+set}" ]]
    then
        popd > /dev/null
    fi
    echo "All Done."
}

# check if config file is available
function check_config_file {
    echo "Reading configuration .."
    if [[ ! -f .deploy ]]
    then
        echo "Error: Configuration file not found."
        exit 1
    fi
}

# read config values
function read_config {

    # read config file into variable, in case we don't have sections
    config=$(<.deploy)

    # check how many sections we have in config file
    cnt=$(grep -o "\[" < .deploy | wc -l)

    # check if we have a config parameter set
    if [[ $# -ne 0 ]]  # yes
    then
        if [[ ${cnt} == 0 ]]  # a config parameter has been given but config file has no sections
        then
            echo "Error: No sections in configuration file."
            exit 1
        fi

        # get the relevant section from the config file
        section_start=$(awk '/\['$1']/{ print NR }' .deploy)
        if [[ ${section_start} -gt 0 ]]
        then
            section_end=0
            for next in $(awk '/\[/{ print NR }' .deploy)
            do
                if [[ ${section_end} == 0 && ${next} > ${section_start} ]]
                then
                    section_end=$((next - 1))
                fi
            done
            if [[ ${section_end} == 0 ]]
            then
                config=$(sed -n ${section_start}',$p' < .deploy)
            else
                config=$(sed -n ${section_start}','${section_end}'p' < .deploy)
            fi
        else  # the provided config isn't present in the config file
            echo "Error: Provided configuration not found in configuration file."
            exit 1
        fi
    else  # no config parameter has been provided
        if [[ ${cnt} -gt 1 ]]  # we have multiple sections in the config file
        then
            echo "Error: No deployment configuration specified, though multiple present in configuration file."
            exit 1
        fi
    fi

    # read configuration
    delimiter="="
    while IFS='' read -r line || [[ -n "$line" ]]; do
        key=$(echo "$line" | cut -d ${delimiter} -f 1 | xargs)
        value=$(echo "$line" | cut -d ${delimiter} -f 2 | xargs)
        case ${key} in
            "type" )
                type=${value}
                ;;
            "path" )
                path=${value}
                ;;
            "user" )
                user=${value}
                ;;
            "host" )
                host=${value}
                ;;
            "cdn" )
                cdn=${value}
                ;;
            "source" )
                source_path=${value}
                ;;
            "delete" )
                del_on_sync=${value}
                ;;
            "apache-conf" )
                apache_conf=${value}
                ;;
            esac
    done <<< "$config"
}

# 
# main


# set default configuration
type="local"
source_path="."
del_on_sync=true
apache_conf=""

# check if we have any argument
if [[ "$#" -ne 0 ]]
then
    for var in "$@"
    do
        if [[ ${var} == --config=* ]]
        then
            config=$(cut -d "=" -f 2 <<< "$var")
        else
            if [[ -d ${var} ]]  # check if directory is valid
            then
                pushd . > /dev/null
                dir=${var}
                cd ${var}
            else
                echo "Error: Invalid directory provided."
                exit 1
            fi
        fi
    done
fi

# check if we have config file
check_config_file

# get configuration
read_config ${config}

# check if path is set
if [[ -z "${path+x}" ]]
then
    echo "Error: Deployment path not set."
    exit 1
fi

# check if source path is valid
if [[ ! -d "${source_path}" ]]
then
    echo "Error: Invalid source path provided."
    exit 1
fi

# check if we have user and host for remote deployment
if [[ "${type}" = "remote-rsync" ]]
then
    if [[ -z "${host+x}" ]] || [[ -z "${user+x}" ]]
    then
        echo "Error: Remote host or user not set."
        exit 1
    fi
fi

# check how we continue
case ${type} in
    "local" )
        sync_local
        ;;
    "remote-rsync" )
        sync_remote
        ;;
    "remote-s3" )
        sync_s3
        ;;
    * )
        echo "Error: Deployment type configuration invalid."
        exit 1
        ;;
esac
